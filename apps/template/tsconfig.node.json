{
  "compilerOptions": {
    // 指定用于存储增量编译信息的文件的路径。
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    // 指定 ECMAScript 目标版本。ES2022 是一个较新的版本，支持现代 JavaScript 语法。
    "target": "ES2022",
    // 指定要包含在编译中的库文件。
    "lib": [
      "ES2023" // 包含 ES2023 的类型定义。
    ],
    // 指定模块代码生成方式。ESNext 允许使用最新的 JavaScript 模块语法。
    "module": "ESNext",
    // 跳过对声明文件（`.d.ts`）的类型检查，以加快编译速度。
    "skipLibCheck": true,

    /* Bundler mode */
    // 使用 bundler 模式进行模块解析，与 Vite 等打包工具兼容。
    "moduleResolution": "bundler",
    // 允许在导入语句中使用 `.ts` 扩展名。
    "allowImportingTsExtensions": true,
    // 将每个文件作为单独的模块进行编译，与 Vite 的工作方式兼容。
    "isolatedModules": true,
    // 强制启用模块检测。
    "moduleDetection": "force",
    // 不生成输出文件（`.js`），因为 Vite 会处理代码的转换和打包。
    "noEmit": true,

    /* Linting */
    // 启用所有严格类型检查选项，以提高代码质量。
    "strict": true,
    // 报告未使用的局部变量。
    "noUnusedLocals": true,
    // 报告未使用的函数参数。
    "noUnusedParameters": true,
    // 防止 switch 语句中的 case 穿透。
    "noFallthroughCasesInSwitch": true,
    // 如果导入的模块没有被使用，则发出错误。
    "noUncheckedSideEffectImports": true
  },
  // 指定要包含在编译中的文件或目录。这里指定了 `vite.config.ts` 文件，表示包含 Vite 的配置文件。
  "include": ["vite.config.ts"]
}
